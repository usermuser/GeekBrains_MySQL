# В домашнем задании №3 была задача:
# База данных «Сотрудники»:
# 1. Выбрать среднюю зарплату по отделам.

SELECT AVG(`zp`) AS 'Средняя ЗП', `depart`.`name` AS 'Отдел' FROM `shtat` 
LEFT JOIN `depart`
ON `depart`.`id` = `shtat`.`otdel`
GROUP BY `otdel`

# Попробуем произвести анализ запроса


mysql> EXPLAIN SELECT 
AVG(`zp`) AS 'Средняя ЗП', 
`depart`.`name` AS 'Отдел' 
FROM `shtat`   
LEFT JOIN 
`depart` ON `depart`.`id` = `shtat`` 
GROUP BY `otdel`;


+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |
+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
|  1 | SIMPLE      | shtat  | NULL       | ALL  | otdel         | NULL | NULL    | NULL |    5 |   100.00 | Using temporary; Using filesort                    |
|  1 | SIMPLE      | depart | NULL       | ALL  | PRIMARY       | NULL | NULL    | NULL |    2 |   100.00 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
2 rows in set, 1 warning (0,00 sec)




# В столбце filtered получаем 100%, но при этом в столбце Extra видим Using temporary; Using filesort
# В методичке к 5му уроку говорится что нужно избавляться от этих двух параметров
# Сделаем индекс для otdel, так как в столбце possible_keys указан именно он.

mysql> CREATE INDEX `i_otdel` ON `shtat`(`otdel`);
Query OK, 0 rows affected (0,31 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> EXPLAIN SELECT AVG(`zp`) AS 'Средняя ЗП', `depart`.`name` AS 'Отдел' FROM `shtat`   LEFT JOIN `depart` ON `depart`.`id` = `shtat`.`otdel` GROUP BY `otdel`;
+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |
+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
|  1 | SIMPLE      | shtat  | NULL       | ALL  | i_otdel       | NULL | NULL    | NULL |    5 |   100.00 | Using temporary; Using filesort                    |
|  1 | SIMPLE      | depart | NULL       | ALL  | PRIMARY       | NULL | NULL    | NULL |    2 |   100.00 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+--------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
2 rows in set, 1 warning (0,00 sec)



# Как видим, столбец Extra остался неизменным, значит на столбец possible_keys не обращаем внимания, он нам не поможет
# Напрашивается другой вывод, есть столбец key, скорее всего именно тут можно оптимизировать, но как это сделать? Знаний пока не хватает.


#======================================================================
## дать бонус сотруднику который работает больше года еще не уволился (`u_date` IS NULL)
# сейчас больше года у нас работает сотрудник с sotr_id = 5

mysql> SELECT * FROM sotrudniki.dates;
+----+------------+------------+---------+
| id | p_date     | u_date     | sotr_id |
+----+------------+------------+---------+
|  1 | 2018-02-12 | 2018-12-12 |       1 |
|  2 | 2018-01-10 | 2018-12-12 |       3 |
|  3 | 2016-02-12 | NULL       |       5 |
|  4 | 2018-12-30 | NULL       |       2 |
+----+------------+------------+---------+
4 rows in set (0,00 sec)


mysql> SELECT * FROM sotrudniki.salary;
# Таблица salary пока пустая
Empty set (0,00 sec)

# Выплатим бонус тому кто проработал больше года (это Аркадий Паровозов)

mysql> SELECT * FROM sotrudniki.shtat;
+----+------------------+----------------------+-------+--------+-------+
| id | name             | lastname             | otdel | pos_id | zp    |
+----+------------------+----------------------+-------+--------+-------+
|  1 | Тарас            | Голомозый            |     1 |      3 | 25700 |
|  2 | Андрей           | Юрченко              |     1 |      2 | 20700 |
|  3 | Антон            | Полонников           |     2 |      3 | 21000 |
|  4 | Анатолий         | Башлыков             |     1 |      2 | 25700 |
|  5 | Аркадий          | Паровозов            |     1 |      1 | 20000 |
+----+------------------+----------------------+-------+--------+-------+
5 rows in set (0,00 sec)

#
USE `sotrudniki`;
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN;
SELECT @a := (select `sotr_id` from `sotrudniki`.`dates` where `p_date` < '2017-01-08');
SELECT @b := (select max(`zp`) from `sotrudniki`.`shtat`);
SELECT @c := (select `zp` from `sotrudniki`.`shtat` where `id` = @a);
INSERT INTO `sotrudniki`.`salary` (`date`,`bonus`,`sotr_id`) VALUES (NOW(), @b-@c, @a); 
COMMIT;

